//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls/PlayersControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayersControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayersControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersControls"",
    ""maps"": [
        {
            ""name"": ""Player1"",
            ""id"": ""6014762f-3665-4f57-91d9-432b06b21e32"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""87ad50db-a22b-43e4-b00a-6073e327566d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b622e588-205a-4ac5-88de-6cec2f970dfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTurn"",
                    ""type"": ""Button"",
                    ""id"": ""9a65b8ee-f063-4b4b-b58a-e589686a3a14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurn"",
                    ""type"": ""Button"",
                    ""id"": ""89c1f125-f06c-477d-b027-35d1cab05d3b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bonk"",
                    ""type"": ""Button"",
                    ""id"": ""8ec48197-fb8d-4106-a6c9-2b0c708c1e9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6dda1dfa-90ed-4107-a780-273de9efb595"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e3fbfa5-41fd-44ca-b6f2-d2d4b0889817"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b5ca771f-90fb-4ca4-827a-aa03fd2bc43d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a248ea2b-0282-4ef1-af8c-39711f664fea"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f95f9f3d-4f4a-4963-9064-7e0270b7f776"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16312d15-0c31-4226-9877-910dbe63f39d"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""id"": ""9fe321b7-9c30-44be-a83f-aa363916b997"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""b2a660a5-81e3-4158-b771-072fa6cb39b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""305ca6f4-09b9-408c-b2f6-150a22bdb6be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTurn"",
                    ""type"": ""Button"",
                    ""id"": ""34c63b72-8858-454d-a35c-cb30ab779b29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurn"",
                    ""type"": ""Button"",
                    ""id"": ""0d2e2fae-67ec-49ad-8651-da6e547336a2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bonk"",
                    ""type"": ""Button"",
                    ""id"": ""9fecbe55-024a-4e87-bc2c-5e28b05cec28"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4fcde642-a56b-4170-8ff0-1e32498611f6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84581b1e-ae2b-46d2-b100-98b0d0a33fce"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""259a1872-4221-413c-b8ec-94ee4f4f0550"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81f0b2d2-fef7-48f4-8969-bea1eff4d051"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a923f774-5d0a-462c-9c8a-63cef0aae8d5"",
                    ""path"": ""<Keyboard>/rightShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player3"",
            ""id"": ""900227cb-8c6d-421d-8d86-bec4b50644d7"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""e8b80cc2-329f-4d9d-a6fc-5133dd873f69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5e82a3d2-03b0-4101-8ada-8d96707a0618"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTurn"",
                    ""type"": ""Button"",
                    ""id"": ""f9d1d421-5c04-4afb-8d53-a6a11a1d721f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurn"",
                    ""type"": ""Button"",
                    ""id"": ""e955c233-701a-43f3-b738-dd7aef6eec02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bonk"",
                    ""type"": ""Button"",
                    ""id"": ""62614888-23b1-4986-a5e0-a46b7cacdbcb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b23cfc2f-a756-4816-a870-daf5195be005"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17b92182-e1db-4ac6-bc87-a0b52e2f4637"",
                    ""path"": ""<Keyboard>/numpad5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36922c87-43cb-4826-b6f0-48a8c91ddcdf"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c5ccfdf0-ad4b-4bf6-a30d-0bd608c0c789"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""843bb128-70c9-4409-b194-733a73a0bd32"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player4"",
            ""id"": ""16620dc8-818c-4291-9c11-49ea836c9118"",
            ""actions"": [
                {
                    ""name"": ""Forward"",
                    ""type"": ""Button"",
                    ""id"": ""8d645d77-ffa9-45e0-b4d1-4aca20429585"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Backward"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5a11c766-ffa6-40dd-897d-1c33c88b4841"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftTurn"",
                    ""type"": ""Button"",
                    ""id"": ""973ad73f-4fe4-4020-b7f7-ca2ab0f5af2a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightTurn"",
                    ""type"": ""Button"",
                    ""id"": ""e26499f0-2c13-4c92-9b24-9b2d13bdf767"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bonk"",
                    ""type"": ""Button"",
                    ""id"": ""d893c31a-932c-4400-a39c-639bac266599"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca167408-dbb2-452e-a630-eafe41e636ed"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7da20fb5-c79f-47eb-b2ba-12e240c69584"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4799aaf1-aa9c-46e4-be3e-39be67d80665"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ee42a380-2769-403c-af03-4d0a7f22aa6a"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightTurn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6a14619-3fa2-4665-98e9-3f3978411ddd"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efe66f2e-dc80-4b8e-a9d4-256b9c709a50"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bonk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1
        m_Player1 = asset.FindActionMap("Player1", throwIfNotFound: true);
        m_Player1_Forward = m_Player1.FindAction("Forward", throwIfNotFound: true);
        m_Player1_Backward = m_Player1.FindAction("Backward", throwIfNotFound: true);
        m_Player1_LeftTurn = m_Player1.FindAction("LeftTurn", throwIfNotFound: true);
        m_Player1_RightTurn = m_Player1.FindAction("RightTurn", throwIfNotFound: true);
        m_Player1_Bonk = m_Player1.FindAction("Bonk", throwIfNotFound: true);
        // Player2
        m_Player2 = asset.FindActionMap("Player2", throwIfNotFound: true);
        m_Player2_Forward = m_Player2.FindAction("Forward", throwIfNotFound: true);
        m_Player2_Backward = m_Player2.FindAction("Backward", throwIfNotFound: true);
        m_Player2_LeftTurn = m_Player2.FindAction("LeftTurn", throwIfNotFound: true);
        m_Player2_RightTurn = m_Player2.FindAction("RightTurn", throwIfNotFound: true);
        m_Player2_Bonk = m_Player2.FindAction("Bonk", throwIfNotFound: true);
        // Player3
        m_Player3 = asset.FindActionMap("Player3", throwIfNotFound: true);
        m_Player3_Forward = m_Player3.FindAction("Forward", throwIfNotFound: true);
        m_Player3_Backward = m_Player3.FindAction("Backward", throwIfNotFound: true);
        m_Player3_LeftTurn = m_Player3.FindAction("LeftTurn", throwIfNotFound: true);
        m_Player3_RightTurn = m_Player3.FindAction("RightTurn", throwIfNotFound: true);
        m_Player3_Bonk = m_Player3.FindAction("Bonk", throwIfNotFound: true);
        // Player4
        m_Player4 = asset.FindActionMap("Player4", throwIfNotFound: true);
        m_Player4_Forward = m_Player4.FindAction("Forward", throwIfNotFound: true);
        m_Player4_Backward = m_Player4.FindAction("Backward", throwIfNotFound: true);
        m_Player4_LeftTurn = m_Player4.FindAction("LeftTurn", throwIfNotFound: true);
        m_Player4_RightTurn = m_Player4.FindAction("RightTurn", throwIfNotFound: true);
        m_Player4_Bonk = m_Player4.FindAction("Bonk", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1
    private readonly InputActionMap m_Player1;
    private IPlayer1Actions m_Player1ActionsCallbackInterface;
    private readonly InputAction m_Player1_Forward;
    private readonly InputAction m_Player1_Backward;
    private readonly InputAction m_Player1_LeftTurn;
    private readonly InputAction m_Player1_RightTurn;
    private readonly InputAction m_Player1_Bonk;
    public struct Player1Actions
    {
        private @PlayersControls m_Wrapper;
        public Player1Actions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Player1_Forward;
        public InputAction @Backward => m_Wrapper.m_Player1_Backward;
        public InputAction @LeftTurn => m_Wrapper.m_Player1_LeftTurn;
        public InputAction @RightTurn => m_Wrapper.m_Player1_RightTurn;
        public InputAction @Bonk => m_Wrapper.m_Player1_Bonk;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBackward;
                @LeftTurn.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnLeftTurn;
                @RightTurn.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRightTurn;
                @RightTurn.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRightTurn;
                @RightTurn.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnRightTurn;
                @Bonk.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBonk;
                @Bonk.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBonk;
                @Bonk.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnBonk;
            }
            m_Wrapper.m_Player1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @LeftTurn.started += instance.OnLeftTurn;
                @LeftTurn.performed += instance.OnLeftTurn;
                @LeftTurn.canceled += instance.OnLeftTurn;
                @RightTurn.started += instance.OnRightTurn;
                @RightTurn.performed += instance.OnRightTurn;
                @RightTurn.canceled += instance.OnRightTurn;
                @Bonk.started += instance.OnBonk;
                @Bonk.performed += instance.OnBonk;
                @Bonk.canceled += instance.OnBonk;
            }
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player2
    private readonly InputActionMap m_Player2;
    private IPlayer2Actions m_Player2ActionsCallbackInterface;
    private readonly InputAction m_Player2_Forward;
    private readonly InputAction m_Player2_Backward;
    private readonly InputAction m_Player2_LeftTurn;
    private readonly InputAction m_Player2_RightTurn;
    private readonly InputAction m_Player2_Bonk;
    public struct Player2Actions
    {
        private @PlayersControls m_Wrapper;
        public Player2Actions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Player2_Forward;
        public InputAction @Backward => m_Wrapper.m_Player2_Backward;
        public InputAction @LeftTurn => m_Wrapper.m_Player2_LeftTurn;
        public InputAction @RightTurn => m_Wrapper.m_Player2_RightTurn;
        public InputAction @Bonk => m_Wrapper.m_Player2_Bonk;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBackward;
                @LeftTurn.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnLeftTurn;
                @RightTurn.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRightTurn;
                @RightTurn.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRightTurn;
                @RightTurn.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnRightTurn;
                @Bonk.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBonk;
                @Bonk.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBonk;
                @Bonk.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnBonk;
            }
            m_Wrapper.m_Player2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @LeftTurn.started += instance.OnLeftTurn;
                @LeftTurn.performed += instance.OnLeftTurn;
                @LeftTurn.canceled += instance.OnLeftTurn;
                @RightTurn.started += instance.OnRightTurn;
                @RightTurn.performed += instance.OnRightTurn;
                @RightTurn.canceled += instance.OnRightTurn;
                @Bonk.started += instance.OnBonk;
                @Bonk.performed += instance.OnBonk;
                @Bonk.canceled += instance.OnBonk;
            }
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);

    // Player3
    private readonly InputActionMap m_Player3;
    private IPlayer3Actions m_Player3ActionsCallbackInterface;
    private readonly InputAction m_Player3_Forward;
    private readonly InputAction m_Player3_Backward;
    private readonly InputAction m_Player3_LeftTurn;
    private readonly InputAction m_Player3_RightTurn;
    private readonly InputAction m_Player3_Bonk;
    public struct Player3Actions
    {
        private @PlayersControls m_Wrapper;
        public Player3Actions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Player3_Forward;
        public InputAction @Backward => m_Wrapper.m_Player3_Backward;
        public InputAction @LeftTurn => m_Wrapper.m_Player3_LeftTurn;
        public InputAction @RightTurn => m_Wrapper.m_Player3_RightTurn;
        public InputAction @Bonk => m_Wrapper.m_Player3_Bonk;
        public InputActionMap Get() { return m_Wrapper.m_Player3; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player3Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer3Actions instance)
        {
            if (m_Wrapper.m_Player3ActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBackward;
                @LeftTurn.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnLeftTurn;
                @RightTurn.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRightTurn;
                @RightTurn.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRightTurn;
                @RightTurn.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnRightTurn;
                @Bonk.started -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBonk;
                @Bonk.performed -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBonk;
                @Bonk.canceled -= m_Wrapper.m_Player3ActionsCallbackInterface.OnBonk;
            }
            m_Wrapper.m_Player3ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @LeftTurn.started += instance.OnLeftTurn;
                @LeftTurn.performed += instance.OnLeftTurn;
                @LeftTurn.canceled += instance.OnLeftTurn;
                @RightTurn.started += instance.OnRightTurn;
                @RightTurn.performed += instance.OnRightTurn;
                @RightTurn.canceled += instance.OnRightTurn;
                @Bonk.started += instance.OnBonk;
                @Bonk.performed += instance.OnBonk;
                @Bonk.canceled += instance.OnBonk;
            }
        }
    }
    public Player3Actions @Player3 => new Player3Actions(this);

    // Player4
    private readonly InputActionMap m_Player4;
    private IPlayer4Actions m_Player4ActionsCallbackInterface;
    private readonly InputAction m_Player4_Forward;
    private readonly InputAction m_Player4_Backward;
    private readonly InputAction m_Player4_LeftTurn;
    private readonly InputAction m_Player4_RightTurn;
    private readonly InputAction m_Player4_Bonk;
    public struct Player4Actions
    {
        private @PlayersControls m_Wrapper;
        public Player4Actions(@PlayersControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Forward => m_Wrapper.m_Player4_Forward;
        public InputAction @Backward => m_Wrapper.m_Player4_Backward;
        public InputAction @LeftTurn => m_Wrapper.m_Player4_LeftTurn;
        public InputAction @RightTurn => m_Wrapper.m_Player4_RightTurn;
        public InputAction @Bonk => m_Wrapper.m_Player4_Bonk;
        public InputActionMap Get() { return m_Wrapper.m_Player4; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player4Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer4Actions instance)
        {
            if (m_Wrapper.m_Player4ActionsCallbackInterface != null)
            {
                @Forward.started -= m_Wrapper.m_Player4ActionsCallbackInterface.OnForward;
                @Forward.performed -= m_Wrapper.m_Player4ActionsCallbackInterface.OnForward;
                @Forward.canceled -= m_Wrapper.m_Player4ActionsCallbackInterface.OnForward;
                @Backward.started -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBackward;
                @Backward.performed -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBackward;
                @Backward.canceled -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBackward;
                @LeftTurn.started -= m_Wrapper.m_Player4ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.performed -= m_Wrapper.m_Player4ActionsCallbackInterface.OnLeftTurn;
                @LeftTurn.canceled -= m_Wrapper.m_Player4ActionsCallbackInterface.OnLeftTurn;
                @RightTurn.started -= m_Wrapper.m_Player4ActionsCallbackInterface.OnRightTurn;
                @RightTurn.performed -= m_Wrapper.m_Player4ActionsCallbackInterface.OnRightTurn;
                @RightTurn.canceled -= m_Wrapper.m_Player4ActionsCallbackInterface.OnRightTurn;
                @Bonk.started -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBonk;
                @Bonk.performed -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBonk;
                @Bonk.canceled -= m_Wrapper.m_Player4ActionsCallbackInterface.OnBonk;
            }
            m_Wrapper.m_Player4ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Forward.started += instance.OnForward;
                @Forward.performed += instance.OnForward;
                @Forward.canceled += instance.OnForward;
                @Backward.started += instance.OnBackward;
                @Backward.performed += instance.OnBackward;
                @Backward.canceled += instance.OnBackward;
                @LeftTurn.started += instance.OnLeftTurn;
                @LeftTurn.performed += instance.OnLeftTurn;
                @LeftTurn.canceled += instance.OnLeftTurn;
                @RightTurn.started += instance.OnRightTurn;
                @RightTurn.performed += instance.OnRightTurn;
                @RightTurn.canceled += instance.OnRightTurn;
                @Bonk.started += instance.OnBonk;
                @Bonk.performed += instance.OnBonk;
                @Bonk.canceled += instance.OnBonk;
            }
        }
    }
    public Player4Actions @Player4 => new Player4Actions(this);
    public interface IPlayer1Actions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeftTurn(InputAction.CallbackContext context);
        void OnRightTurn(InputAction.CallbackContext context);
        void OnBonk(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeftTurn(InputAction.CallbackContext context);
        void OnRightTurn(InputAction.CallbackContext context);
        void OnBonk(InputAction.CallbackContext context);
    }
    public interface IPlayer3Actions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeftTurn(InputAction.CallbackContext context);
        void OnRightTurn(InputAction.CallbackContext context);
        void OnBonk(InputAction.CallbackContext context);
    }
    public interface IPlayer4Actions
    {
        void OnForward(InputAction.CallbackContext context);
        void OnBackward(InputAction.CallbackContext context);
        void OnLeftTurn(InputAction.CallbackContext context);
        void OnRightTurn(InputAction.CallbackContext context);
        void OnBonk(InputAction.CallbackContext context);
    }
}
